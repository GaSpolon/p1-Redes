#!/usr/bin/env python3
import asyncio
from urllib import response
from tcp import Servidor
import re
from collections import defaultdict

apelidos = {}
conexoes = {}
canais = {}
participantes = {}

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def validar_canal(nome):
    return nome.startswith(b'#') and validar_nome(nome[1:])

def sair(conexao):
    pessoas_avisadas = defaultdict(lambda : False)
    try:
        for canal in participantes[apelidos[conexao]]:
            canais[canal].remove(apelidos[conexao])
            for pessoa in canais[canal]:
                if not pessoas_avisadas[pessoa.lower()]:
                    response = b':%s QUIT :Connection closed\r\n' % apelidos[conexao]
                    conexoes[pessoa.lower()].enviar(response)
                    pessoas_avisadas[pessoa.lower()] = True
        del participantes[apelidos[conexao]]
        del conexoes[apelidos[conexao].lower()]
        del apelidos[conexao]
    except:
        pass
    print(conexao, 'conexão fechada')
    conexao.fechar()

buffer = ""

def processa_dados(conexao, s):
    global buffer    
    for i in s:
        buffer += i
        if(buffer.endswith('\n')):
            executa_comando(conexao, bytes(buffer, "utf-8"))
            buffer = ""
    return buffer

def nome_canal(destinatario):
    for canal in canais.keys():
        if destinatario.lower() == canal.lower():
            destinatario = canal
    return destinatario

def dados_recebidos(conexao, dados):
    recebido = dados.decode("utf-8")
    if dados == b'':
        return sair(conexao)
    processa_dados(conexao,recebido)
    print(conexao, dados)

def executa_comando(conexao, comando):
    if comando.startswith(b'PING '):
        payload =  comando.split(b' ')[1]
        response = b':server PONG server :%s' % payload 
    elif comando.startswith(b'NICK '):
        nickname =  comando.split(b' ')[1]
        nickname = nickname.split(b'\r')[0]
        valido = validar_nome(nickname)
        nick_atual = b'*'
        if(conexao in apelidos.keys()):
            nick_atual = apelidos[conexao]
        if not valido:
            response = b':server 432 %s %s :Erroneous nickname\r\n' % (nick_atual, nickname)
        elif nome_usado(nickname):
            response = b':server 433 %s %s :Nickname is already in use\r\n' % (nick_atual, nickname)
        else:
            if(conexao in apelidos.keys()):
                del conexoes[apelidos[conexao].lower()] 
                response = b':%s NICK %s\r\n' % (apelidos[conexao], nickname)
                pessoas_avisadas = defaultdict(lambda : False)
                try:
                    for canal in participantes[apelidos[conexao]]:
                        canais[canal].remove(apelidos[conexao])
                        for pessoa in canais[canal]:
                            if not pessoas_avisadas[pessoa.lower()]:
                                conexoes[pessoa.lower()].enviar(response)
                                pessoas_avisadas[pessoa.lower()] = True
                        canais[canal].append(nickname)
                    participantes[nickname] = participantes[apelidos[conexao]] 
                    del participantes[apelidos[conexao]]
                except:
                    pass
                apelidos[conexao] = nickname
                conexoes[nickname.lower()] = conexao
                conexoes[nickname.lower()].enviar(response)
                return
            else:
                response = b':server 001 %s :Welcome\r\n:server 422 %s :MOTD File is missing\r\n' % (nickname, nickname) 
            apelidos[conexao] = nickname
            conexoes[nickname.lower()] = conexao
    elif comando.startswith(b'PRIVMSG '):
        remetente = apelidos[conexao]
        destinatario = comando.split(b' ')[1]
        conteudo = comando.split(b' ')[2]
        if not comando.split(b' ')[1].startswith(b'#'):
            if destinatario.lower() not in  conexoes.keys():
                return
            response = b':%s PRIVMSG %s %s' % (remetente, apelidos[conexoes[destinatario.lower()]], conteudo)
            conexoes[destinatario.lower()].enviar(response)
            return
        destinatario = nome_canal(destinatario)
        if remetente.lower() not in [x.lower() for x in canais[destinatario]]:
            return
        response = b':%s PRIVMSG %s %s' % (remetente, destinatario, conteudo)
        for pessoa in canais[destinatario]:
            if(pessoa.lower() != remetente.lower()):
                conexoes[pessoa.lower()].enviar(response)
        return
    elif comando.startswith(b'JOIN '):
        canal = comando.split(b' ')[1]
        canal = canal.split(b'\r')[0]
        if not validar_canal(canal):
            response = b':server 403 %s :No such channel\r\n' % canal
        else:
            if not canal.lower() in [x.lower() for x in canais.keys()]:
                canais[canal] = []
            canais[canal].append(apelidos[conexao])
            if not apelidos[conexao] in participantes.keys():
                participantes[apelidos[conexao]] = []
            participantes[apelidos[conexao]].append(canal)
            response = b':%s JOIN :%s\r\n' % (apelidos[conexao], canal)
            for membro in canais[canal]:
                conexoes[membro.lower()].enviar(response)
            response = b':server 353 %s = %s :' %(apelidos[conexao], canal)
            membros = canais[canal]
            membros.sort()
            mensagem = response
            for membro in membros:
                if len(membro) + len(mensagem) + 1 <= 510:
                    mensagem += membro + b' '
                else:
                    conexao.enviar(mensagem + b'\r\n')
                    mensagem = response + membro
            if(mensagem != response):
                conexao.enviar(mensagem + b'\r\n')
            conexao.enviar(b':server 366 %s %s :End of /NAMES list.\r\n' % (apelidos[conexao], canal))
            return
    conexao.enviar(response)

def nome_usado(name):
    return name.lower() in conexoes.keys()

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
